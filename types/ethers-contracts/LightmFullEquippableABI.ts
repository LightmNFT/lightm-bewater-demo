/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IDiamondCut {
  export type FacetCutStruct = {
    facetAddress: PromiseOrValue<string>;
    action: PromiseOrValue<BigNumberish>;
    functionSelectors: PromiseOrValue<BytesLike>[];
  };

  export type FacetCutStructOutput = [string, number, string[]] & {
    facetAddress: string;
    action: number;
    functionSelectors: string[];
  };
}

export declare namespace IDiamondLoupe {
  export type FacetStruct = {
    facetAddress: PromiseOrValue<string>;
    functionSelectors: PromiseOrValue<BytesLike>[];
  };

  export type FacetStructOutput = [string, string[]] & {
    facetAddress: string;
    functionSelectors: string[];
  };
}

export declare namespace IRMRKNestableEventsAndStruct {
  export type ChildStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    contractAddress: PromiseOrValue<string>;
  };

  export type ChildStructOutput = [BigNumber, string] & {
    tokenId: BigNumber;
    contractAddress: string;
  };
}

export declare namespace ILightmMultiAssetEventsAndStruct {
  export type AssetStruct = {
    id: PromiseOrValue<BigNumberish>;
    metadataURI: PromiseOrValue<string>;
  };

  export type AssetStructOutput = [BigNumber, string] & {
    id: BigNumber;
    metadataURI: string;
  };
}

export declare namespace ILightmEquippableEventsAndStruct {
  export type SlotEquipmentStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    catalogRelatedAssetId: PromiseOrValue<BigNumberish>;
    slotId: PromiseOrValue<BigNumberish>;
    childCatalogRelatedAssetId: PromiseOrValue<BigNumberish>;
    child: IRMRKNestableEventsAndStruct.ChildStruct;
  };

  export type SlotEquipmentStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    IRMRKNestableEventsAndStruct.ChildStructOutput
  ] & {
    tokenId: BigNumber;
    catalogRelatedAssetId: BigNumber;
    slotId: BigNumber;
    childCatalogRelatedAssetId: BigNumber;
    child: IRMRKNestableEventsAndStruct.ChildStructOutput;
  };

  export type CatalogRelatedAssetStruct = {
    id: PromiseOrValue<BigNumberish>;
    catalogAddress: PromiseOrValue<string>;
    targetSlotId: PromiseOrValue<BigNumberish>;
    targetCatalogAddress: PromiseOrValue<string>;
    partIds: PromiseOrValue<BigNumberish>[];
    metadataURI: PromiseOrValue<string>;
  };

  export type CatalogRelatedAssetStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber[],
    string
  ] & {
    id: BigNumber;
    catalogAddress: string;
    targetSlotId: BigNumber;
    targetCatalogAddress: string;
    partIds: BigNumber[];
    metadataURI: string;
  };

  export type CatalogRelatedDataStruct = {
    catalogAddress: PromiseOrValue<string>;
    targetSlotId: PromiseOrValue<BigNumberish>;
    targetCatalogAddress: PromiseOrValue<string>;
    partIds: PromiseOrValue<BigNumberish>[];
  };

  export type CatalogRelatedDataStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber[]
  ] & {
    catalogAddress: string;
    targetSlotId: BigNumber;
    targetCatalogAddress: string;
    partIds: BigNumber[];
  };
}

export declare namespace IERC6220EventsAndStruct {
  export type EquipmentStruct = {
    assetId: PromiseOrValue<BigNumberish>;
    childAssetId: PromiseOrValue<BigNumberish>;
    childId: PromiseOrValue<BigNumberish>;
    childEquippableAddress: PromiseOrValue<string>;
  };

  export type EquipmentStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    assetId: BigNumber;
    childAssetId: BigNumber;
    childId: BigNumber;
    childEquippableAddress: string;
  };

  export type IntakeEquipStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    childIndex: PromiseOrValue<BigNumberish>;
    assetId: PromiseOrValue<BigNumberish>;
    slotPartId: PromiseOrValue<BigNumberish>;
    childAssetId: PromiseOrValue<BigNumberish>;
  };

  export type IntakeEquipStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokenId: BigNumber;
    childIndex: BigNumber;
    assetId: BigNumber;
    slotPartId: BigNumber;
    childAssetId: BigNumber;
  };
}

export declare namespace ILightmMintModuleStruct {
  export type MintConfigStruct = {
    whitelistMintPrice: PromiseOrValue<BigNumberish>;
    publicMintPrice: PromiseOrValue<BigNumberish>;
    maxSupply: PromiseOrValue<BigNumberish>;
    whitelistMintLimit: PromiseOrValue<BigNumberish>;
    publicMintLimit: PromiseOrValue<BigNumberish>;
    mintStyle: PromiseOrValue<BigNumberish>;
  };

  export type MintConfigStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ] & {
    whitelistMintPrice: BigNumber;
    publicMintPrice: BigNumber;
    maxSupply: BigNumber;
    whitelistMintLimit: BigNumber;
    publicMintLimit: BigNumber;
    mintStyle: number;
  };
}

export interface LightmFullEquippableABIInterface extends utils.Interface {
  functions: {
    "diamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "acceptChild(uint256,address,uint256)": FunctionFragment;
    "acceptChild(uint256,uint256,address,uint256)": FunctionFragment;
    "addChild(uint256,uint256,bytes)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burn(uint256,uint256)": FunctionFragment;
    "childOf(uint256,uint256)": FunctionFragment;
    "childrenOf(uint256)": FunctionFragment;
    "directOwnerOf(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "hasChild(uint256,address,uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "nestTransfer(address,uint256,uint256)": FunctionFragment;
    "nestTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pendingChildOf(uint256,uint256)": FunctionFragment;
    "pendingChildrenOf(uint256)": FunctionFragment;
    "reclaimChild(uint256,address,uint256)": FunctionFragment;
    "rejectAllChildren(uint256,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "symbol()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferChild(uint256,address,uint256,address,uint256,bool,bytes)": FunctionFragment;
    "transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "acceptAsset(uint256,uint64)": FunctionFragment;
    "acceptAsset(uint256,uint256,uint64)": FunctionFragment;
    "approveForAssets(address,uint256)": FunctionFragment;
    "getActiveAssetPriorities(uint256)": FunctionFragment;
    "getActiveAssets(uint256)": FunctionFragment;
    "getApprovedForAssets(uint256)": FunctionFragment;
    "getAssetMetadata(uint256,uint64)": FunctionFragment;
    "getAssetMetadata(uint64)": FunctionFragment;
    "getAssetReplacements(uint256,uint64)": FunctionFragment;
    "getFullAssets(uint256)": FunctionFragment;
    "getFullPendingAssets(uint256)": FunctionFragment;
    "getPendingAssets(uint256)": FunctionFragment;
    "isApprovedForAllForAssets(address,address)": FunctionFragment;
    "rejectAllAssets(uint256,uint256)": FunctionFragment;
    "rejectAsset(uint256,uint64)": FunctionFragment;
    "rejectAsset(uint256,uint256,uint64)": FunctionFragment;
    "setApprovalForAllForAssets(address,bool)": FunctionFragment;
    "setPriority(uint256,uint64[])": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "addSlotEquipments(uint256,uint64,(uint256,uint64,uint64,uint64,(uint256,address))[],bool)": FunctionFragment;
    "getActiveCatalogRelatedAssets(uint256)": FunctionFragment;
    "getAllCatalogRelatedAssetIds()": FunctionFragment;
    "getAllSlotEquipments()": FunctionFragment;
    "getCatalogRelatedAsset(uint64)": FunctionFragment;
    "getCatalogRelatedAssets(uint64[])": FunctionFragment;
    "getSlotEquipment(address,uint256,uint64)": FunctionFragment;
    "getSlotEquipment(uint256,uint64,uint64)": FunctionFragment;
    "getSlotEquipmentByIndex(uint256)": FunctionFragment;
    "getSlotEquipments(uint256,uint64)": FunctionFragment;
    "getSlotEquipments(address,uint256)": FunctionFragment;
    "removeSlotEquipments(address,uint256,uint64[])": FunctionFragment;
    "removeSlotEquipments(uint256,uint64,uint64[])": FunctionFragment;
    "_canTokenBeEquippedWithAssetIntoSlot(address,uint256,uint64,uint64)": FunctionFragment;
    "_getAssetAndEquippableData(uint256,uint64)": FunctionFragment;
    "_getEquipment(uint256,address,uint64)": FunctionFragment;
    "canTokenBeEquippedWithAssetIntoSlot(address,uint256,uint64,uint64)": FunctionFragment;
    "equip((uint256,uint256,uint64,uint64,uint64))": FunctionFragment;
    "getAssetAndEquippableData(uint256,uint64)": FunctionFragment;
    "getEquipment(uint256,address,uint64)": FunctionFragment;
    "isChildEquipped(uint256,address,uint256)": FunctionFragment;
    "unequip(uint256,uint64,uint64)": FunctionFragment;
    "collectionMetadata()": FunctionFragment;
    "ASSET_CONTRIBUTOR_ROLE()": FunctionFragment;
    "addAssetEntry(uint64,string)": FunctionFragment;
    "addAssetToToken(uint256,uint64,uint64)": FunctionFragment;
    "addCatalogRelatedAssetEntry(uint64,(address,uint64,address,uint64[]),string)": FunctionFragment;
    "getCollectionOwner()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "setCollectionMetadata(string)": FunctionFragment;
    "setCollectionOwner(address)": FunctionFragment;
    "setFallbackURI(string)": FunctionFragment;
    "getMintConfig()": FunctionFragment;
    "getMintPermissions()": FunctionFragment;
    "getWhitelistMerkleProofRoot()": FunctionFragment;
    "maxSupply()": FunctionFragment;
    "mint()": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "setMintPermission(uint8,bool)": FunctionFragment;
    "setWhitelistMerkleProofRoot(bytes32)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "whitelistMint(address,bytes32[])": FunctionFragment;
    "whitelistMint(uint256,address,bytes32[])": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "diamondCut"
      | "facetAddress"
      | "facetAddresses"
      | "facetFunctionSelectors"
      | "facets"
      | "supportsInterface"
      | "acceptChild(uint256,address,uint256)"
      | "acceptChild(uint256,uint256,address,uint256)"
      | "addChild"
      | "approve"
      | "balanceOf"
      | "burn(uint256)"
      | "burn(uint256,uint256)"
      | "childOf"
      | "childrenOf"
      | "directOwnerOf"
      | "getApproved"
      | "hasChild"
      | "isApprovedForAll"
      | "name"
      | "nestTransfer"
      | "nestTransferFrom"
      | "ownerOf"
      | "pendingChildOf"
      | "pendingChildrenOf"
      | "reclaimChild"
      | "rejectAllChildren"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "symbol"
      | "transfer"
      | "transferChild(uint256,address,uint256,address,uint256,bool,bytes)"
      | "transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)"
      | "transferFrom"
      | "acceptAsset(uint256,uint64)"
      | "acceptAsset(uint256,uint256,uint64)"
      | "approveForAssets"
      | "getActiveAssetPriorities"
      | "getActiveAssets"
      | "getApprovedForAssets"
      | "getAssetMetadata(uint256,uint64)"
      | "getAssetMetadata(uint64)"
      | "getAssetReplacements"
      | "getFullAssets"
      | "getFullPendingAssets"
      | "getPendingAssets"
      | "isApprovedForAllForAssets"
      | "rejectAllAssets"
      | "rejectAsset(uint256,uint64)"
      | "rejectAsset(uint256,uint256,uint64)"
      | "setApprovalForAllForAssets"
      | "setPriority"
      | "tokenURI"
      | "addSlotEquipments"
      | "getActiveCatalogRelatedAssets"
      | "getAllCatalogRelatedAssetIds"
      | "getAllSlotEquipments"
      | "getCatalogRelatedAsset"
      | "getCatalogRelatedAssets"
      | "getSlotEquipment(address,uint256,uint64)"
      | "getSlotEquipment(uint256,uint64,uint64)"
      | "getSlotEquipmentByIndex"
      | "getSlotEquipments(uint256,uint64)"
      | "getSlotEquipments(address,uint256)"
      | "removeSlotEquipments(address,uint256,uint64[])"
      | "removeSlotEquipments(uint256,uint64,uint64[])"
      | "_canTokenBeEquippedWithAssetIntoSlot"
      | "_getAssetAndEquippableData"
      | "_getEquipment"
      | "canTokenBeEquippedWithAssetIntoSlot"
      | "equip"
      | "getAssetAndEquippableData"
      | "getEquipment"
      | "isChildEquipped"
      | "unequip"
      | "collectionMetadata"
      | "ASSET_CONTRIBUTOR_ROLE"
      | "addAssetEntry"
      | "addAssetToToken"
      | "addCatalogRelatedAssetEntry"
      | "getCollectionOwner"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "multicall"
      | "renounceRole"
      | "revokeRole"
      | "royaltyInfo"
      | "setCollectionMetadata"
      | "setCollectionOwner"
      | "setFallbackURI"
      | "getMintConfig"
      | "getMintPermissions"
      | "getWhitelistMerkleProofRoot"
      | "maxSupply"
      | "mint()"
      | "mint(uint256)"
      | "setMintPermission"
      | "setWhitelistMerkleProofRoot"
      | "totalSupply"
      | "whitelistMint(address,bytes32[])"
      | "whitelistMint(uint256,address,bytes32[])"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [
      IDiamondCut.FacetCutStruct[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptChild(uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptChild(uint256,uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addChild",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "burn(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burn(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "childOf",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "childrenOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "directOwnerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasChild",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nestTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nestTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingChildOf",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingChildrenOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reclaimChild",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectAllChildren",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferChild(uint256,address,uint256,address,uint256,bool,bytes)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptAsset(uint256,uint64)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptAsset(uint256,uint256,uint64)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approveForAssets",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveAssetPriorities",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveAssets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApprovedForAssets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetMetadata(uint256,uint64)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetMetadata(uint64)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetReplacements",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFullAssets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFullPendingAssets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingAssets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAllForAssets",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectAllAssets",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectAsset(uint256,uint64)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectAsset(uint256,uint256,uint64)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAllForAssets",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriority",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addSlotEquipments",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      ILightmEquippableEventsAndStruct.SlotEquipmentStruct[],
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveCatalogRelatedAssets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCatalogRelatedAssetIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllSlotEquipments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCatalogRelatedAsset",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCatalogRelatedAssets",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getSlotEquipment(address,uint256,uint64)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSlotEquipment(uint256,uint64,uint64)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSlotEquipmentByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSlotEquipments(uint256,uint64)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSlotEquipments(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSlotEquipments(address,uint256,uint64[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSlotEquipments(uint256,uint64,uint64[])",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_canTokenBeEquippedWithAssetIntoSlot",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_getAssetAndEquippableData",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_getEquipment",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "canTokenBeEquippedWithAssetIntoSlot",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "equip",
    values: [IERC6220EventsAndStruct.IntakeEquipStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetAndEquippableData",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEquipment",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isChildEquipped",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unequip",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ASSET_CONTRIBUTOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAssetEntry",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addAssetToToken",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addCatalogRelatedAssetEntry",
    values: [
      PromiseOrValue<BigNumberish>,
      ILightmEquippableEventsAndStruct.CatalogRelatedDataStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionMetadata",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFallbackURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMintPermissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistMerkleProofRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(functionFragment: "mint()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintPermission",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistMerkleProofRoot",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistMint(address,bytes32[])",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistMint(uint256,address,bytes32[])",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptChild(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptChild(uint256,uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addChild", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burn(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burn(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "childOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "childrenOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "directOwnerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasChild", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nestTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nestTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingChildOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingChildrenOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reclaimChild",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectAllChildren",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferChild(uint256,address,uint256,address,uint256,bool,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptAsset(uint256,uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptAsset(uint256,uint256,uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveForAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveAssetPriorities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApprovedForAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetMetadata(uint256,uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetMetadata(uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetReplacements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFullAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFullPendingAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAllForAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectAllAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectAsset(uint256,uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectAsset(uint256,uint256,uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAllForAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addSlotEquipments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveCatalogRelatedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCatalogRelatedAssetIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllSlotEquipments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCatalogRelatedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCatalogRelatedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSlotEquipment(address,uint256,uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSlotEquipment(uint256,uint64,uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSlotEquipmentByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSlotEquipments(uint256,uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSlotEquipments(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSlotEquipments(address,uint256,uint64[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSlotEquipments(uint256,uint64,uint64[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_canTokenBeEquippedWithAssetIntoSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getAssetAndEquippableData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getEquipment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canTokenBeEquippedWithAssetIntoSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "equip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetAndEquippableData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEquipment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isChildEquipped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unequip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectionMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ASSET_CONTRIBUTOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAssetEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAssetToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCatalogRelatedAssetEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFallbackURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistMerkleProofRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mint(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistMerkleProofRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistMint(address,bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistMint(uint256,address,bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "ChildAssetEquipped(uint256,uint64,uint64,uint256,address,uint64)": EventFragment;
    "ChildAssetUnequipped(uint256,uint64,uint64,uint256,address,uint64)": EventFragment;
    "ValidParentEquippableGroupIdSet(uint64,uint64,address)": EventFragment;
    "RMRKCollectionMetdataSet(string)": EventFragment;
    "AllChildrenRejected(uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ApprovalForAllForAssets(address,address,bool)": EventFragment;
    "ApprovalForAssets(address,address,uint256)": EventFragment;
    "AssetAccepted(uint256,uint64,uint64)": EventFragment;
    "AssetAddedToTokens(uint256[],uint64,uint64)": EventFragment;
    "AssetPrioritySet(uint256)": EventFragment;
    "AssetRejected(uint256,uint64)": EventFragment;
    "AssetSet(uint64)": EventFragment;
    "CatalogRelatedAssetAdd(uint64)": EventFragment;
    "ChildAccepted(uint256,uint256,address,uint256)": EventFragment;
    "ChildProposed(uint256,uint256,address,uint256)": EventFragment;
    "ChildTransferred(uint256,uint256,address,uint256,bool)": EventFragment;
    "LightmMultiAssetFallbackURISet(string)": EventFragment;
    "NestTransfer(address,address,uint256,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SlotEquipmentsAdd(uint256,uint64,tuple[])": EventFragment;
    "SlotEquipmentsRemove(uint256,uint64,uint64[])": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChildAssetEquipped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChildAssetUnequipped"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ValidParentEquippableGroupIdSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RMRKCollectionMetdataSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllChildrenRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAllForAssets"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAssets"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetAddedToTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetPrioritySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CatalogRelatedAssetAdd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChildAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChildProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChildTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LightmMultiAssetFallbackURISet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NestTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlotEquipmentsAdd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlotEquipmentsRemove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface DiamondCutEventObject {
  _diamondCut: IDiamondCut.FacetCutStructOutput[];
  _init: string;
  _calldata: string;
}
export type DiamondCutEvent = TypedEvent<
  [IDiamondCut.FacetCutStructOutput[], string, string],
  DiamondCutEventObject
>;

export type DiamondCutEventFilter = TypedEventFilter<DiamondCutEvent>;

export interface ChildAssetEquippedEventObject {
  tokenId: BigNumber;
  assetId: BigNumber;
  slotPartId: BigNumber;
  childId: BigNumber;
  childAddress: string;
  childAssetId: BigNumber;
}
export type ChildAssetEquippedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber],
  ChildAssetEquippedEventObject
>;

export type ChildAssetEquippedEventFilter =
  TypedEventFilter<ChildAssetEquippedEvent>;

export interface ChildAssetUnequippedEventObject {
  tokenId: BigNumber;
  assetId: BigNumber;
  slotPartId: BigNumber;
  childId: BigNumber;
  childAddress: string;
  childAssetId: BigNumber;
}
export type ChildAssetUnequippedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber],
  ChildAssetUnequippedEventObject
>;

export type ChildAssetUnequippedEventFilter =
  TypedEventFilter<ChildAssetUnequippedEvent>;

export interface ValidParentEquippableGroupIdSetEventObject {
  equippableGroupId: BigNumber;
  slotPartId: BigNumber;
  parentAddress: string;
}
export type ValidParentEquippableGroupIdSetEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  ValidParentEquippableGroupIdSetEventObject
>;

export type ValidParentEquippableGroupIdSetEventFilter =
  TypedEventFilter<ValidParentEquippableGroupIdSetEvent>;

export interface RMRKCollectionMetdataSetEventObject {
  metadataURI: string;
}
export type RMRKCollectionMetdataSetEvent = TypedEvent<
  [string],
  RMRKCollectionMetdataSetEventObject
>;

export type RMRKCollectionMetdataSetEventFilter =
  TypedEventFilter<RMRKCollectionMetdataSetEvent>;

export interface AllChildrenRejectedEventObject {
  tokenId: BigNumber;
}
export type AllChildrenRejectedEvent = TypedEvent<
  [BigNumber],
  AllChildrenRejectedEventObject
>;

export type AllChildrenRejectedEventFilter =
  TypedEventFilter<AllChildrenRejectedEvent>;

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface ApprovalForAllForAssetsEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllForAssetsEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllForAssetsEventObject
>;

export type ApprovalForAllForAssetsEventFilter =
  TypedEventFilter<ApprovalForAllForAssetsEvent>;

export interface ApprovalForAssetsEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalForAssetsEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalForAssetsEventObject
>;

export type ApprovalForAssetsEventFilter =
  TypedEventFilter<ApprovalForAssetsEvent>;

export interface AssetAcceptedEventObject {
  tokenId: BigNumber;
  assetId: BigNumber;
  replacedId: BigNumber;
}
export type AssetAcceptedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  AssetAcceptedEventObject
>;

export type AssetAcceptedEventFilter = TypedEventFilter<AssetAcceptedEvent>;

export interface AssetAddedToTokensEventObject {
  tokenIds: BigNumber[];
  assetId: BigNumber;
  replacesId: BigNumber;
}
export type AssetAddedToTokensEvent = TypedEvent<
  [BigNumber[], BigNumber, BigNumber],
  AssetAddedToTokensEventObject
>;

export type AssetAddedToTokensEventFilter =
  TypedEventFilter<AssetAddedToTokensEvent>;

export interface AssetPrioritySetEventObject {
  tokenId: BigNumber;
}
export type AssetPrioritySetEvent = TypedEvent<
  [BigNumber],
  AssetPrioritySetEventObject
>;

export type AssetPrioritySetEventFilter =
  TypedEventFilter<AssetPrioritySetEvent>;

export interface AssetRejectedEventObject {
  tokenId: BigNumber;
  assetId: BigNumber;
}
export type AssetRejectedEvent = TypedEvent<
  [BigNumber, BigNumber],
  AssetRejectedEventObject
>;

export type AssetRejectedEventFilter = TypedEventFilter<AssetRejectedEvent>;

export interface AssetSetEventObject {
  assetId: BigNumber;
}
export type AssetSetEvent = TypedEvent<[BigNumber], AssetSetEventObject>;

export type AssetSetEventFilter = TypedEventFilter<AssetSetEvent>;

export interface CatalogRelatedAssetAddEventObject {
  id: BigNumber;
}
export type CatalogRelatedAssetAddEvent = TypedEvent<
  [BigNumber],
  CatalogRelatedAssetAddEventObject
>;

export type CatalogRelatedAssetAddEventFilter =
  TypedEventFilter<CatalogRelatedAssetAddEvent>;

export interface ChildAcceptedEventObject {
  tokenId: BigNumber;
  childIndex: BigNumber;
  childAddress: string;
  childId: BigNumber;
}
export type ChildAcceptedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  ChildAcceptedEventObject
>;

export type ChildAcceptedEventFilter = TypedEventFilter<ChildAcceptedEvent>;

export interface ChildProposedEventObject {
  tokenId: BigNumber;
  childIndex: BigNumber;
  childAddress: string;
  childId: BigNumber;
}
export type ChildProposedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  ChildProposedEventObject
>;

export type ChildProposedEventFilter = TypedEventFilter<ChildProposedEvent>;

export interface ChildTransferredEventObject {
  tokenId: BigNumber;
  childIndex: BigNumber;
  childAddress: string;
  childId: BigNumber;
  fromPending: boolean;
}
export type ChildTransferredEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, boolean],
  ChildTransferredEventObject
>;

export type ChildTransferredEventFilter =
  TypedEventFilter<ChildTransferredEvent>;

export interface LightmMultiAssetFallbackURISetEventObject {
  fallbackURI: string;
}
export type LightmMultiAssetFallbackURISetEvent = TypedEvent<
  [string],
  LightmMultiAssetFallbackURISetEventObject
>;

export type LightmMultiAssetFallbackURISetEventFilter =
  TypedEventFilter<LightmMultiAssetFallbackURISetEvent>;

export interface NestTransferEventObject {
  from: string;
  to: string;
  fromTokenId: BigNumber;
  toTokenId: BigNumber;
  tokenId: BigNumber;
}
export type NestTransferEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  NestTransferEventObject
>;

export type NestTransferEventFilter = TypedEventFilter<NestTransferEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SlotEquipmentsAddEventObject {
  tokenId: BigNumber;
  catalogRelatedAssetId: BigNumber;
  slotEquipments: ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput[];
}
export type SlotEquipmentsAddEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput[]
  ],
  SlotEquipmentsAddEventObject
>;

export type SlotEquipmentsAddEventFilter =
  TypedEventFilter<SlotEquipmentsAddEvent>;

export interface SlotEquipmentsRemoveEventObject {
  tokenId: BigNumber;
  catalogRelatedAssetId: BigNumber;
  indexes: BigNumber[];
}
export type SlotEquipmentsRemoveEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber[]],
  SlotEquipmentsRemoveEventObject
>;

export type SlotEquipmentsRemoveEventFilter =
  TypedEventFilter<SlotEquipmentsRemoveEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface LightmFullEquippableABI extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LightmFullEquippableABIInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      _functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { facetAddress_: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetAddresses_: string[] }>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetFunctionSelectors_: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<
      [IDiamondLoupe.FacetStructOutput[]] & {
        facets_: IDiamondLoupe.FacetStructOutput[];
      }
    >;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "acceptChild(uint256,address,uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      childContractAddress: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "acceptChild(uint256,uint256,address,uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      childContractAddress: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addChild(
      parentTokenId: PromiseOrValue<BigNumberish>,
      childTokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "burn(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "burn(uint256,uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      maxRecursiveBurns: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    childOf(
      parentTokenId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IRMRKNestableEventsAndStruct.ChildStructOutput]>;

    childrenOf(
      parentTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IRMRKNestableEventsAndStruct.ChildStructOutput[]]>;

    directOwnerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, boolean]>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hasChild(
      tokenId: PromiseOrValue<BigNumberish>,
      childContract: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        found: boolean;
        isPending: boolean;
        index: BigNumber;
      }
    >;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nestTransfer(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      destinationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nestTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      destinationId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pendingChildOf(
      parentTokenId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IRMRKNestableEventsAndStruct.ChildStructOutput]>;

    pendingChildrenOf(
      parentTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IRMRKNestableEventsAndStruct.ChildStructOutput[]]>;

    reclaimChild(
      tokenId: PromiseOrValue<BigNumberish>,
      childAddress: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rejectAllChildren(
      tokenId: PromiseOrValue<BigNumberish>,
      maxRejections: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    transfer(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferChild(uint256,address,uint256,address,uint256,bool,bytes)"(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      destinationId: PromiseOrValue<BigNumberish>,
      childContractAddress: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      isPending: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)"(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      destinationId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      childContractAddress: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      isPending: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "acceptAsset(uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "acceptAsset(uint256,uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveForAssets(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActiveAssetPriorities(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getActiveAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getApprovedForAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getAssetMetadata(uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getAssetMetadata(uint64)"(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAssetReplacements(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFullAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ILightmMultiAssetEventsAndStruct.AssetStructOutput[]]>;

    getFullPendingAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ILightmMultiAssetEventsAndStruct.AssetStructOutput[]]>;

    getPendingAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    isApprovedForAllForAssets(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rejectAllAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      maxRejections: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "rejectAsset(uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "rejectAsset(uint256,uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAllForAssets(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriority(
      tokenId: PromiseOrValue<BigNumberish>,
      priorities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addSlotEquipments(
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      slotEquipments: ILightmEquippableEventsAndStruct.SlotEquipmentStruct[],
      doMoreCheck: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActiveCatalogRelatedAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAllCatalogRelatedAssetIds(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { allCatalogRelatedAssetIds: BigNumber[] }>;

    getAllSlotEquipments(
      overrides?: CallOverrides
    ): Promise<
      [ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput[]] & {
        slotEquipments: ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput[];
      }
    >;

    getCatalogRelatedAsset(
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [ILightmEquippableEventsAndStruct.CatalogRelatedAssetStructOutput] & {
        catalogRelatedAsset: ILightmEquippableEventsAndStruct.CatalogRelatedAssetStructOutput;
      }
    >;

    getCatalogRelatedAssets(
      catalogRelatedAssetIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [ILightmEquippableEventsAndStruct.CatalogRelatedAssetStructOutput[]]
    >;

    "getSlotEquipment(address,uint256,uint64)"(
      childContract: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      childCatalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput] & {
        slotEquipment: ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput;
      }
    >;

    "getSlotEquipment(uint256,uint64,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      slotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput] & {
        slotEquipment: ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput;
      }
    >;

    getSlotEquipmentByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput] & {
        slotEquipment: ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput;
      }
    >;

    "getSlotEquipments(uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput[]]>;

    "getSlotEquipments(address,uint256)"(
      childContract: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput[]]>;

    "removeSlotEquipments(address,uint256,uint64[])"(
      childContract: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      childCatalogRelatedAssetIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeSlotEquipments(uint256,uint64,uint64[])"(
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      slotIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _canTokenBeEquippedWithAssetIntoSlot(
      parent: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      slotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _getAssetAndEquippableData(
      arg0: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string, BigNumber[]]>;

    _getEquipment(
      tokenId: PromiseOrValue<BigNumberish>,
      targetCatalogAddress: PromiseOrValue<string>,
      slotPartId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IERC6220EventsAndStruct.EquipmentStructOutput]>;

    canTokenBeEquippedWithAssetIntoSlot(
      parent: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      slotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    equip(
      data: IERC6220EventsAndStruct.IntakeEquipStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAssetAndEquippableData(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string, BigNumber[]]>;

    getEquipment(
      tokenId: PromiseOrValue<BigNumberish>,
      targetCatalogAddress: PromiseOrValue<string>,
      slotPartId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IERC6220EventsAndStruct.EquipmentStructOutput]>;

    isChildEquipped(
      tokenId: PromiseOrValue<BigNumberish>,
      childAddress: PromiseOrValue<string>,
      childId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unequip(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      slotPartId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectionMetadata(overrides?: CallOverrides): Promise<[string]>;

    ASSET_CONTRIBUTOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addAssetEntry(
      id: PromiseOrValue<BigNumberish>,
      metadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addAssetToToken(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      toBeReplacedId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addCatalogRelatedAssetEntry(
      id: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetData: ILightmEquippableEventsAndStruct.CatalogRelatedDataStruct,
      metadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCollectionOwner(
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    setCollectionMetadata(
      newMetadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCollectionOwner(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFallbackURI(
      fallbackURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMintConfig(
      overrides?: CallOverrides
    ): Promise<[ILightmMintModuleStruct.MintConfigStructOutput]>;

    getMintPermissions(
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean] & {
        allowPublicMint: boolean;
        allowWhitelistMint: boolean;
      }
    >;

    getWhitelistMerkleProofRoot(overrides?: CallOverrides): Promise<[string]>;

    maxSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mint()"(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mint(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMintPermission(
      mintStage: PromiseOrValue<BigNumberish>,
      allow: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWhitelistMerkleProofRoot(
      root: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "whitelistMint(address,bytes32[])"(
      to: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "whitelistMint(uint256,address,bytes32[])"(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  diamondCut(
    _diamondCut: IDiamondCut.FacetCutStruct[],
    _init: PromiseOrValue<string>,
    _calldata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  facetAddress(
    _functionSelector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(overrides?: CallOverrides): Promise<IDiamondLoupe.FacetStructOutput[]>;

  supportsInterface(
    _interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "acceptChild(uint256,address,uint256)"(
    tokenId: PromiseOrValue<BigNumberish>,
    childContractAddress: PromiseOrValue<string>,
    childTokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "acceptChild(uint256,uint256,address,uint256)"(
    tokenId: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    childContractAddress: PromiseOrValue<string>,
    childTokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addChild(
    parentTokenId: PromiseOrValue<BigNumberish>,
    childTokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "burn(uint256)"(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "burn(uint256,uint256)"(
    tokenId: PromiseOrValue<BigNumberish>,
    maxRecursiveBurns: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  childOf(
    parentTokenId: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IRMRKNestableEventsAndStruct.ChildStructOutput>;

  childrenOf(
    parentTokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IRMRKNestableEventsAndStruct.ChildStructOutput[]>;

  directOwnerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, boolean]>;

  getApproved(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  hasChild(
    tokenId: PromiseOrValue<BigNumberish>,
    childContract: PromiseOrValue<string>,
    childTokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber] & {
      found: boolean;
      isPending: boolean;
      index: BigNumber;
    }
  >;

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  nestTransfer(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    destinationId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nestTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    destinationId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  pendingChildOf(
    parentTokenId: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IRMRKNestableEventsAndStruct.ChildStructOutput>;

  pendingChildrenOf(
    parentTokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IRMRKNestableEventsAndStruct.ChildStructOutput[]>;

  reclaimChild(
    tokenId: PromiseOrValue<BigNumberish>,
    childAddress: PromiseOrValue<string>,
    childTokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rejectAllChildren(
    tokenId: PromiseOrValue<BigNumberish>,
    maxRejections: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  transfer(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferChild(uint256,address,uint256,address,uint256,bool,bytes)"(
    tokenId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    destinationId: PromiseOrValue<BigNumberish>,
    childContractAddress: PromiseOrValue<string>,
    childTokenId: PromiseOrValue<BigNumberish>,
    isPending: PromiseOrValue<boolean>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)"(
    tokenId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    destinationId: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    childContractAddress: PromiseOrValue<string>,
    childTokenId: PromiseOrValue<BigNumberish>,
    isPending: PromiseOrValue<boolean>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "acceptAsset(uint256,uint64)"(
    tokenId: PromiseOrValue<BigNumberish>,
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "acceptAsset(uint256,uint256,uint64)"(
    tokenId: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveForAssets(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActiveAssetPriorities(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getActiveAssets(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getApprovedForAssets(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAssetMetadata(uint256,uint64)"(
    tokenId: PromiseOrValue<BigNumberish>,
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAssetMetadata(uint64)"(
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAssetReplacements(
    tokenId: PromiseOrValue<BigNumberish>,
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFullAssets(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILightmMultiAssetEventsAndStruct.AssetStructOutput[]>;

  getFullPendingAssets(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILightmMultiAssetEventsAndStruct.AssetStructOutput[]>;

  getPendingAssets(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  isApprovedForAllForAssets(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rejectAllAssets(
    tokenId: PromiseOrValue<BigNumberish>,
    maxRejections: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "rejectAsset(uint256,uint64)"(
    tokenId: PromiseOrValue<BigNumberish>,
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "rejectAsset(uint256,uint256,uint64)"(
    tokenId: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAllForAssets(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriority(
    tokenId: PromiseOrValue<BigNumberish>,
    priorities: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  addSlotEquipments(
    tokenId: PromiseOrValue<BigNumberish>,
    catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
    slotEquipments: ILightmEquippableEventsAndStruct.SlotEquipmentStruct[],
    doMoreCheck: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActiveCatalogRelatedAssets(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAllCatalogRelatedAssetIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  getAllSlotEquipments(
    overrides?: CallOverrides
  ): Promise<ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput[]>;

  getCatalogRelatedAsset(
    catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILightmEquippableEventsAndStruct.CatalogRelatedAssetStructOutput>;

  getCatalogRelatedAssets(
    catalogRelatedAssetIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<
    ILightmEquippableEventsAndStruct.CatalogRelatedAssetStructOutput[]
  >;

  "getSlotEquipment(address,uint256,uint64)"(
    childContract: PromiseOrValue<string>,
    childTokenId: PromiseOrValue<BigNumberish>,
    childCatalogRelatedAssetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput>;

  "getSlotEquipment(uint256,uint64,uint64)"(
    tokenId: PromiseOrValue<BigNumberish>,
    catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
    slotId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput>;

  getSlotEquipmentByIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput>;

  "getSlotEquipments(uint256,uint64)"(
    tokenId: PromiseOrValue<BigNumberish>,
    catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput[]>;

  "getSlotEquipments(address,uint256)"(
    childContract: PromiseOrValue<string>,
    childTokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput[]>;

  "removeSlotEquipments(address,uint256,uint64[])"(
    childContract: PromiseOrValue<string>,
    childTokenId: PromiseOrValue<BigNumberish>,
    childCatalogRelatedAssetIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeSlotEquipments(uint256,uint64,uint64[])"(
    tokenId: PromiseOrValue<BigNumberish>,
    catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
    slotIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _canTokenBeEquippedWithAssetIntoSlot(
    parent: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    assetId: PromiseOrValue<BigNumberish>,
    slotId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _getAssetAndEquippableData(
    arg0: PromiseOrValue<BigNumberish>,
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string, BigNumber[]]>;

  _getEquipment(
    tokenId: PromiseOrValue<BigNumberish>,
    targetCatalogAddress: PromiseOrValue<string>,
    slotPartId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IERC6220EventsAndStruct.EquipmentStructOutput>;

  canTokenBeEquippedWithAssetIntoSlot(
    parent: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    assetId: PromiseOrValue<BigNumberish>,
    slotId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  equip(
    data: IERC6220EventsAndStruct.IntakeEquipStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAssetAndEquippableData(
    tokenId: PromiseOrValue<BigNumberish>,
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string, BigNumber[]]>;

  getEquipment(
    tokenId: PromiseOrValue<BigNumberish>,
    targetCatalogAddress: PromiseOrValue<string>,
    slotPartId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IERC6220EventsAndStruct.EquipmentStructOutput>;

  isChildEquipped(
    tokenId: PromiseOrValue<BigNumberish>,
    childAddress: PromiseOrValue<string>,
    childId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unequip(
    tokenId: PromiseOrValue<BigNumberish>,
    assetId: PromiseOrValue<BigNumberish>,
    slotPartId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectionMetadata(overrides?: CallOverrides): Promise<string>;

  ASSET_CONTRIBUTOR_ROLE(overrides?: CallOverrides): Promise<string>;

  addAssetEntry(
    id: PromiseOrValue<BigNumberish>,
    metadataURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addAssetToToken(
    tokenId: PromiseOrValue<BigNumberish>,
    assetId: PromiseOrValue<BigNumberish>,
    toBeReplacedId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addCatalogRelatedAssetEntry(
    id: PromiseOrValue<BigNumberish>,
    catalogRelatedAssetData: ILightmEquippableEventsAndStruct.CatalogRelatedDataStruct,
    metadataURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCollectionOwner(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  royaltyInfo(
    tokenId: PromiseOrValue<BigNumberish>,
    salePrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  setCollectionMetadata(
    newMetadata: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCollectionOwner(
    target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFallbackURI(
    fallbackURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMintConfig(
    overrides?: CallOverrides
  ): Promise<ILightmMintModuleStruct.MintConfigStructOutput>;

  getMintPermissions(
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean] & {
      allowPublicMint: boolean;
      allowWhitelistMint: boolean;
    }
  >;

  getWhitelistMerkleProofRoot(overrides?: CallOverrides): Promise<string>;

  maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "mint()"(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mint(uint256)"(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMintPermission(
    mintStage: PromiseOrValue<BigNumberish>,
    allow: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWhitelistMerkleProofRoot(
    root: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "whitelistMint(address,bytes32[])"(
    to: PromiseOrValue<string>,
    proof: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "whitelistMint(uint256,address,bytes32[])"(
    tokenId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    proof: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      _functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(
      overrides?: CallOverrides
    ): Promise<IDiamondLoupe.FacetStructOutput[]>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "acceptChild(uint256,address,uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      childContractAddress: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptChild(uint256,uint256,address,uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      childContractAddress: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addChild(
      parentTokenId: PromiseOrValue<BigNumberish>,
      childTokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "burn(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "burn(uint256,uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      maxRecursiveBurns: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    childOf(
      parentTokenId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IRMRKNestableEventsAndStruct.ChildStructOutput>;

    childrenOf(
      parentTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IRMRKNestableEventsAndStruct.ChildStructOutput[]>;

    directOwnerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, boolean]>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    hasChild(
      tokenId: PromiseOrValue<BigNumberish>,
      childContract: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        found: boolean;
        isPending: boolean;
        index: BigNumber;
      }
    >;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    nestTransfer(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      destinationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    nestTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      destinationId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    pendingChildOf(
      parentTokenId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IRMRKNestableEventsAndStruct.ChildStructOutput>;

    pendingChildrenOf(
      parentTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IRMRKNestableEventsAndStruct.ChildStructOutput[]>;

    reclaimChild(
      tokenId: PromiseOrValue<BigNumberish>,
      childAddress: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    rejectAllChildren(
      tokenId: PromiseOrValue<BigNumberish>,
      maxRejections: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    transfer(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferChild(uint256,address,uint256,address,uint256,bool,bytes)"(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      destinationId: PromiseOrValue<BigNumberish>,
      childContractAddress: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      isPending: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)"(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      destinationId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      childContractAddress: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      isPending: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptAsset(uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptAsset(uint256,uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveForAssets(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getActiveAssetPriorities(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getActiveAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getApprovedForAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAssetMetadata(uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAssetMetadata(uint64)"(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAssetReplacements(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFullAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILightmMultiAssetEventsAndStruct.AssetStructOutput[]>;

    getFullPendingAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILightmMultiAssetEventsAndStruct.AssetStructOutput[]>;

    getPendingAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    isApprovedForAllForAssets(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rejectAllAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      maxRejections: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "rejectAsset(uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "rejectAsset(uint256,uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAllForAssets(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriority(
      tokenId: PromiseOrValue<BigNumberish>,
      priorities: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    addSlotEquipments(
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      slotEquipments: ILightmEquippableEventsAndStruct.SlotEquipmentStruct[],
      doMoreCheck: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    getActiveCatalogRelatedAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAllCatalogRelatedAssetIds(
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAllSlotEquipments(
      overrides?: CallOverrides
    ): Promise<ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput[]>;

    getCatalogRelatedAsset(
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILightmEquippableEventsAndStruct.CatalogRelatedAssetStructOutput>;

    getCatalogRelatedAssets(
      catalogRelatedAssetIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      ILightmEquippableEventsAndStruct.CatalogRelatedAssetStructOutput[]
    >;

    "getSlotEquipment(address,uint256,uint64)"(
      childContract: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      childCatalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput>;

    "getSlotEquipment(uint256,uint64,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      slotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput>;

    getSlotEquipmentByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput>;

    "getSlotEquipments(uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput[]>;

    "getSlotEquipments(address,uint256)"(
      childContract: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILightmEquippableEventsAndStruct.SlotEquipmentStructOutput[]>;

    "removeSlotEquipments(address,uint256,uint64[])"(
      childContract: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      childCatalogRelatedAssetIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "removeSlotEquipments(uint256,uint64,uint64[])"(
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      slotIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    _canTokenBeEquippedWithAssetIntoSlot(
      parent: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      slotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _getAssetAndEquippableData(
      arg0: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string, BigNumber[]]>;

    _getEquipment(
      tokenId: PromiseOrValue<BigNumberish>,
      targetCatalogAddress: PromiseOrValue<string>,
      slotPartId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IERC6220EventsAndStruct.EquipmentStructOutput>;

    canTokenBeEquippedWithAssetIntoSlot(
      parent: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      slotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    equip(
      data: IERC6220EventsAndStruct.IntakeEquipStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getAssetAndEquippableData(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string, BigNumber[]]>;

    getEquipment(
      tokenId: PromiseOrValue<BigNumberish>,
      targetCatalogAddress: PromiseOrValue<string>,
      slotPartId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IERC6220EventsAndStruct.EquipmentStructOutput>;

    isChildEquipped(
      tokenId: PromiseOrValue<BigNumberish>,
      childAddress: PromiseOrValue<string>,
      childId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unequip(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      slotPartId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    collectionMetadata(overrides?: CallOverrides): Promise<string>;

    ASSET_CONTRIBUTOR_ROLE(overrides?: CallOverrides): Promise<string>;

    addAssetEntry(
      id: PromiseOrValue<BigNumberish>,
      metadataURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addAssetToToken(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      toBeReplacedId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addCatalogRelatedAssetEntry(
      id: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetData: ILightmEquippableEventsAndStruct.CatalogRelatedDataStruct,
      metadataURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCollectionOwner(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    setCollectionMetadata(
      newMetadata: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectionOwner(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFallbackURI(
      fallbackURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getMintConfig(
      overrides?: CallOverrides
    ): Promise<ILightmMintModuleStruct.MintConfigStructOutput>;

    getMintPermissions(
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean] & {
        allowPublicMint: boolean;
        allowWhitelistMint: boolean;
      }
    >;

    getWhitelistMerkleProofRoot(overrides?: CallOverrides): Promise<string>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "mint()"(overrides?: CallOverrides): Promise<void>;

    "mint(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintPermission(
      mintStage: PromiseOrValue<BigNumberish>,
      allow: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistMerkleProofRoot(
      root: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "whitelistMint(address,bytes32[])"(
      to: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "whitelistMint(uint256,address,bytes32[])"(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DiamondCut(tuple[],address,bytes)"(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;
    DiamondCut(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;

    "ChildAssetEquipped(uint256,uint64,uint64,uint256,address,uint64)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      slotPartId?: PromiseOrValue<BigNumberish> | null,
      childId?: null,
      childAddress?: null,
      childAssetId?: null
    ): ChildAssetEquippedEventFilter;
    ChildAssetEquipped(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      slotPartId?: PromiseOrValue<BigNumberish> | null,
      childId?: null,
      childAddress?: null,
      childAssetId?: null
    ): ChildAssetEquippedEventFilter;

    "ChildAssetUnequipped(uint256,uint64,uint64,uint256,address,uint64)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      slotPartId?: PromiseOrValue<BigNumberish> | null,
      childId?: null,
      childAddress?: null,
      childAssetId?: null
    ): ChildAssetUnequippedEventFilter;
    ChildAssetUnequipped(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      slotPartId?: PromiseOrValue<BigNumberish> | null,
      childId?: null,
      childAddress?: null,
      childAssetId?: null
    ): ChildAssetUnequippedEventFilter;

    "ValidParentEquippableGroupIdSet(uint64,uint64,address)"(
      equippableGroupId?: PromiseOrValue<BigNumberish> | null,
      slotPartId?: PromiseOrValue<BigNumberish> | null,
      parentAddress?: null
    ): ValidParentEquippableGroupIdSetEventFilter;
    ValidParentEquippableGroupIdSet(
      equippableGroupId?: PromiseOrValue<BigNumberish> | null,
      slotPartId?: PromiseOrValue<BigNumberish> | null,
      parentAddress?: null
    ): ValidParentEquippableGroupIdSetEventFilter;

    "RMRKCollectionMetdataSet(string)"(
      metadataURI?: null
    ): RMRKCollectionMetdataSetEventFilter;
    RMRKCollectionMetdataSet(
      metadataURI?: null
    ): RMRKCollectionMetdataSetEventFilter;

    "AllChildrenRejected(uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): AllChildrenRejectedEventFilter;
    AllChildrenRejected(
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): AllChildrenRejectedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "ApprovalForAllForAssets(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllForAssetsEventFilter;
    ApprovalForAllForAssets(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllForAssetsEventFilter;

    "ApprovalForAssets(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalForAssetsEventFilter;
    ApprovalForAssets(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalForAssetsEventFilter;

    "AssetAccepted(uint256,uint64,uint64)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      replacedId?: PromiseOrValue<BigNumberish> | null
    ): AssetAcceptedEventFilter;
    AssetAccepted(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      replacedId?: PromiseOrValue<BigNumberish> | null
    ): AssetAcceptedEventFilter;

    "AssetAddedToTokens(uint256[],uint64,uint64)"(
      tokenIds?: null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      replacesId?: PromiseOrValue<BigNumberish> | null
    ): AssetAddedToTokensEventFilter;
    AssetAddedToTokens(
      tokenIds?: null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      replacesId?: PromiseOrValue<BigNumberish> | null
    ): AssetAddedToTokensEventFilter;

    "AssetPrioritySet(uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): AssetPrioritySetEventFilter;
    AssetPrioritySet(
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): AssetPrioritySetEventFilter;

    "AssetRejected(uint256,uint64)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null
    ): AssetRejectedEventFilter;
    AssetRejected(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      assetId?: PromiseOrValue<BigNumberish> | null
    ): AssetRejectedEventFilter;

    "AssetSet(uint64)"(
      assetId?: PromiseOrValue<BigNumberish> | null
    ): AssetSetEventFilter;
    AssetSet(
      assetId?: PromiseOrValue<BigNumberish> | null
    ): AssetSetEventFilter;

    "CatalogRelatedAssetAdd(uint64)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): CatalogRelatedAssetAddEventFilter;
    CatalogRelatedAssetAdd(
      id?: PromiseOrValue<BigNumberish> | null
    ): CatalogRelatedAssetAddEventFilter;

    "ChildAccepted(uint256,uint256,address,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      childIndex?: null,
      childAddress?: PromiseOrValue<string> | null,
      childId?: PromiseOrValue<BigNumberish> | null
    ): ChildAcceptedEventFilter;
    ChildAccepted(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      childIndex?: null,
      childAddress?: PromiseOrValue<string> | null,
      childId?: PromiseOrValue<BigNumberish> | null
    ): ChildAcceptedEventFilter;

    "ChildProposed(uint256,uint256,address,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      childIndex?: null,
      childAddress?: PromiseOrValue<string> | null,
      childId?: PromiseOrValue<BigNumberish> | null
    ): ChildProposedEventFilter;
    ChildProposed(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      childIndex?: null,
      childAddress?: PromiseOrValue<string> | null,
      childId?: PromiseOrValue<BigNumberish> | null
    ): ChildProposedEventFilter;

    "ChildTransferred(uint256,uint256,address,uint256,bool)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      childIndex?: null,
      childAddress?: PromiseOrValue<string> | null,
      childId?: PromiseOrValue<BigNumberish> | null,
      fromPending?: null
    ): ChildTransferredEventFilter;
    ChildTransferred(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      childIndex?: null,
      childAddress?: PromiseOrValue<string> | null,
      childId?: PromiseOrValue<BigNumberish> | null,
      fromPending?: null
    ): ChildTransferredEventFilter;

    "LightmMultiAssetFallbackURISet(string)"(
      fallbackURI?: null
    ): LightmMultiAssetFallbackURISetEventFilter;
    LightmMultiAssetFallbackURISet(
      fallbackURI?: null
    ): LightmMultiAssetFallbackURISetEventFilter;

    "NestTransfer(address,address,uint256,uint256,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      fromTokenId?: null,
      toTokenId?: null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): NestTransferEventFilter;
    NestTransfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      fromTokenId?: null,
      toTokenId?: null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): NestTransferEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SlotEquipmentsAdd(uint256,uint64,tuple[])"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      catalogRelatedAssetId?: PromiseOrValue<BigNumberish> | null,
      slotEquipments?: null
    ): SlotEquipmentsAddEventFilter;
    SlotEquipmentsAdd(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      catalogRelatedAssetId?: PromiseOrValue<BigNumberish> | null,
      slotEquipments?: null
    ): SlotEquipmentsAddEventFilter;

    "SlotEquipmentsRemove(uint256,uint64,uint64[])"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      catalogRelatedAssetId?: PromiseOrValue<BigNumberish> | null,
      indexes?: null
    ): SlotEquipmentsRemoveEventFilter;
    SlotEquipmentsRemove(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      catalogRelatedAssetId?: PromiseOrValue<BigNumberish> | null,
      indexes?: null
    ): SlotEquipmentsRemoveEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
  };

  estimateGas: {
    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    facetAddress(
      _functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "acceptChild(uint256,address,uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      childContractAddress: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "acceptChild(uint256,uint256,address,uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      childContractAddress: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addChild(
      parentTokenId: PromiseOrValue<BigNumberish>,
      childTokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "burn(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "burn(uint256,uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      maxRecursiveBurns: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    childOf(
      parentTokenId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    childrenOf(
      parentTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    directOwnerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasChild(
      tokenId: PromiseOrValue<BigNumberish>,
      childContract: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nestTransfer(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      destinationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nestTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      destinationId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingChildOf(
      parentTokenId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingChildrenOf(
      parentTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reclaimChild(
      tokenId: PromiseOrValue<BigNumberish>,
      childAddress: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rejectAllChildren(
      tokenId: PromiseOrValue<BigNumberish>,
      maxRejections: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferChild(uint256,address,uint256,address,uint256,bool,bytes)"(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      destinationId: PromiseOrValue<BigNumberish>,
      childContractAddress: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      isPending: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)"(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      destinationId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      childContractAddress: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      isPending: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "acceptAsset(uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "acceptAsset(uint256,uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveForAssets(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActiveAssetPriorities(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApprovedForAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAssetMetadata(uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAssetMetadata(uint64)"(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetReplacements(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFullAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFullPendingAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAllForAssets(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rejectAllAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      maxRejections: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "rejectAsset(uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "rejectAsset(uint256,uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAllForAssets(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriority(
      tokenId: PromiseOrValue<BigNumberish>,
      priorities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addSlotEquipments(
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      slotEquipments: ILightmEquippableEventsAndStruct.SlotEquipmentStruct[],
      doMoreCheck: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActiveCatalogRelatedAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllCatalogRelatedAssetIds(overrides?: CallOverrides): Promise<BigNumber>;

    getAllSlotEquipments(overrides?: CallOverrides): Promise<BigNumber>;

    getCatalogRelatedAsset(
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCatalogRelatedAssets(
      catalogRelatedAssetIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSlotEquipment(address,uint256,uint64)"(
      childContract: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      childCatalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSlotEquipment(uint256,uint64,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      slotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSlotEquipmentByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSlotEquipments(uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSlotEquipments(address,uint256)"(
      childContract: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "removeSlotEquipments(address,uint256,uint64[])"(
      childContract: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      childCatalogRelatedAssetIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeSlotEquipments(uint256,uint64,uint64[])"(
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      slotIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _canTokenBeEquippedWithAssetIntoSlot(
      parent: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      slotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getAssetAndEquippableData(
      arg0: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getEquipment(
      tokenId: PromiseOrValue<BigNumberish>,
      targetCatalogAddress: PromiseOrValue<string>,
      slotPartId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canTokenBeEquippedWithAssetIntoSlot(
      parent: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      slotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    equip(
      data: IERC6220EventsAndStruct.IntakeEquipStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAssetAndEquippableData(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEquipment(
      tokenId: PromiseOrValue<BigNumberish>,
      targetCatalogAddress: PromiseOrValue<string>,
      slotPartId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isChildEquipped(
      tokenId: PromiseOrValue<BigNumberish>,
      childAddress: PromiseOrValue<string>,
      childId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unequip(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      slotPartId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectionMetadata(overrides?: CallOverrides): Promise<BigNumber>;

    ASSET_CONTRIBUTOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addAssetEntry(
      id: PromiseOrValue<BigNumberish>,
      metadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addAssetToToken(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      toBeReplacedId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addCatalogRelatedAssetEntry(
      id: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetData: ILightmEquippableEventsAndStruct.CatalogRelatedDataStruct,
      metadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCollectionOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCollectionMetadata(
      newMetadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCollectionOwner(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFallbackURI(
      fallbackURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMintConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getMintPermissions(overrides?: CallOverrides): Promise<BigNumber>;

    getWhitelistMerkleProofRoot(overrides?: CallOverrides): Promise<BigNumber>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "mint()"(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mint(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMintPermission(
      mintStage: PromiseOrValue<BigNumberish>,
      allow: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWhitelistMerkleProofRoot(
      root: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "whitelistMint(address,bytes32[])"(
      to: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "whitelistMint(uint256,address,bytes32[])"(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      _functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "acceptChild(uint256,address,uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      childContractAddress: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "acceptChild(uint256,uint256,address,uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      childContractAddress: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addChild(
      parentTokenId: PromiseOrValue<BigNumberish>,
      childTokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "burn(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "burn(uint256,uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      maxRecursiveBurns: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    childOf(
      parentTokenId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    childrenOf(
      parentTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    directOwnerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasChild(
      tokenId: PromiseOrValue<BigNumberish>,
      childContract: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nestTransfer(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      destinationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nestTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      destinationId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingChildOf(
      parentTokenId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingChildrenOf(
      parentTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reclaimChild(
      tokenId: PromiseOrValue<BigNumberish>,
      childAddress: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rejectAllChildren(
      tokenId: PromiseOrValue<BigNumberish>,
      maxRejections: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferChild(uint256,address,uint256,address,uint256,bool,bytes)"(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      destinationId: PromiseOrValue<BigNumberish>,
      childContractAddress: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      isPending: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)"(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      destinationId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      childContractAddress: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      isPending: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "acceptAsset(uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "acceptAsset(uint256,uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveForAssets(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActiveAssetPriorities(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApprovedForAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAssetMetadata(uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAssetMetadata(uint64)"(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetReplacements(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFullAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFullPendingAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAllForAssets(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rejectAllAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      maxRejections: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "rejectAsset(uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "rejectAsset(uint256,uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAllForAssets(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriority(
      tokenId: PromiseOrValue<BigNumberish>,
      priorities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addSlotEquipments(
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      slotEquipments: ILightmEquippableEventsAndStruct.SlotEquipmentStruct[],
      doMoreCheck: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActiveCatalogRelatedAssets(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllCatalogRelatedAssetIds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllSlotEquipments(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCatalogRelatedAsset(
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCatalogRelatedAssets(
      catalogRelatedAssetIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSlotEquipment(address,uint256,uint64)"(
      childContract: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      childCatalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSlotEquipment(uint256,uint64,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      slotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSlotEquipmentByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSlotEquipments(uint256,uint64)"(
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSlotEquipments(address,uint256)"(
      childContract: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "removeSlotEquipments(address,uint256,uint64[])"(
      childContract: PromiseOrValue<string>,
      childTokenId: PromiseOrValue<BigNumberish>,
      childCatalogRelatedAssetIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeSlotEquipments(uint256,uint64,uint64[])"(
      tokenId: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetId: PromiseOrValue<BigNumberish>,
      slotIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _canTokenBeEquippedWithAssetIntoSlot(
      parent: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      slotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getAssetAndEquippableData(
      arg0: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getEquipment(
      tokenId: PromiseOrValue<BigNumberish>,
      targetCatalogAddress: PromiseOrValue<string>,
      slotPartId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canTokenBeEquippedWithAssetIntoSlot(
      parent: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      slotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    equip(
      data: IERC6220EventsAndStruct.IntakeEquipStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAssetAndEquippableData(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEquipment(
      tokenId: PromiseOrValue<BigNumberish>,
      targetCatalogAddress: PromiseOrValue<string>,
      slotPartId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isChildEquipped(
      tokenId: PromiseOrValue<BigNumberish>,
      childAddress: PromiseOrValue<string>,
      childId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unequip(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      slotPartId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectionMetadata(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ASSET_CONTRIBUTOR_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAssetEntry(
      id: PromiseOrValue<BigNumberish>,
      metadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addAssetToToken(
      tokenId: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      toBeReplacedId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addCatalogRelatedAssetEntry(
      id: PromiseOrValue<BigNumberish>,
      catalogRelatedAssetData: ILightmEquippableEventsAndStruct.CatalogRelatedDataStruct,
      metadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCollectionOwner(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCollectionMetadata(
      newMetadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionOwner(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFallbackURI(
      fallbackURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMintConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMintPermissions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWhitelistMerkleProofRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mint()"(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mint(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMintPermission(
      mintStage: PromiseOrValue<BigNumberish>,
      allow: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistMerkleProofRoot(
      root: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "whitelistMint(address,bytes32[])"(
      to: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "whitelistMint(uint256,address,bytes32[])"(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
